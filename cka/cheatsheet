


alias kccid='k config current-context'

alias k='kubectl'
alias kg='kubectl get'
alias ke='kubectl edit'
alias kd='kubectl describe'
alias kgp='kubectl get pods'
alias kgd='kubectl get deployments'
alias kcc='kubectl config use-context'
alias kn='kubectl config set-context --current --namespace '
alias kcid='kubectl config gre-contexts | grep -i "*"'  -- check current namespace

kn default        # set default to default
kn my-namespace   # set default to my-namespace


alias kdd='kubectl delete'
alias kns='kubens'
alias kcx='kubectx'
alias wkgp='watch kubectl get pod'


alias k=kubectl                         # will already be pre-configured

alias curltest='kubectl run --rm  -i curltestpod --image=curlimages/curl --restart=Never -- curl -m 2 --connect-timeout 2'   # curltest http://svcname
alias nslookuptest='kubectl run --rm  -i nslookuptest --image=busybox:1.28 --restart=Never -- nslookup'   # nslookuptest scvname.default.svc

export do="--dry-run=client -o yaml"    # k create deploy nginx --image=nginx $do
export now="--force --grace-period 0"   # k delete pod x $now




------

curl alias

ep manifest

--connect-timeout 5 
---------


-------
pod antiaffinity
-------------

behave deployment as daemonset to plave one pod per node except master node


#-----
etcdctl
------


#!/bin/bash

ETCD_VERSION=${ETCD_VERSION:-v3.3.1}

curl -L https://github.com/coreos/etcd/releases/download/$ETCD_VERSION/etcd-$ETCD_VERSION-linux-amd64.tar.gz -o etcd-$ETCD_VERSION-linux-amd64.tar.gz

tar xzvf etcd-$ETCD_VERSION-linux-amd64.tar.gz
rm etcd-$ETCD_VERSION-linux-amd64.tar.gz

cd etcd-$ETCD_VERSION-linux-amd64
sudo cp etcd /usr/local/bin/
sudo cp etcdctl /usr/local/bin/

rm -rf etcd-$ETCD_VERSION-linux-amd64

etcdctl --version


/////////


cluster2-controlplane ~ ➜ cd /tmp
cluster2-controlplane ~ ➜ export RELEASE=$(curl -s https://api.github.com/repos/etcd-io/etcd/releases/latest | grep tag_name | cut -d '"' -f 4)
cluster2-controlplane ~ ➜ wget https://github.com/etcd-io/etcd/releases/download/${RELEASE}/etcd-${RELEASE}-linux-amd64.tar.gz
cluster2-controlplane ~ ➜ tar xvf etcd-${RELEASE}-linux-amd64.tar.gz ; cd etcd-${RELEASE}-linux-amd64
cluster2-controlplane ~ ➜ mv etcd etcdctl  /usr/local/bin/


#--------------
test pod to test curling
#---------------

kubectl run --rm  -i test-curl-pod --image=curlimages/curl --restart=Never -- curl -m 2 external-webserver-cka03-svcn

#-----------------
ngins pod
#--------------

kubectl run nginx-resolver-cka06-svcn --image=nginx
kubectl expose pod/nginx-resolver-cka06-svcn --name=nginx-resolver-service-cka06-svcn --port=80 --target-port=80 --type=ClusterIP 

#----------------------
get svc and pod dns names
#------------------------

kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup nginx-resolver-service-cka06-svcn

kubectl run test-nslookup --image=busybox:1.28 --rm -it --restart=Never -- nslookup $POD_IP.default.pod



#-----------------
if kubectl unable to reach api-server
#--------------

journalctl -u kubelet -f
journalctl -u kubelet -f | grep -v 'connect: connection refused'
cluster4-controlplane kubelet[2240]: E0923 04:38:15.630925    
2240 file.go:187] "Could not process manifest file" err="invalid pod: [spec.containers[0].volumeMounts[1].name: Not found: \"etcd-cert\"]" path="/etc/kubernetes/manifests/etcd.yaml" -- most likely a typo or thing
systemctl restart kubelet

#-------
Secrets
#-------

-- create generic secret from file
kubectl create secret generic db-user-pass-cka17-arch --from-file=/opt/db-user-pass 



student-node ~ ➜  k top pod -A --context=cluster4 |  grep -v NAME | sort -n -k4 -r | head -n 1 | awk -F " " '{print $1,$2}'
kube-system kube-apiserver-cluster4-controlplane

student-node ~ ➜  echo "cluster4,kube-system,kube-apiserver-cluster4-controlplane" >> /opt/high_memory_pod 
student-node ~ ➜  cat /opt/high_memory_pod 

Q. Install etcutil

Q. How to find service associated with a pod?

Q. cron schedule?


Q. Spin a test pod with curl and nslookup

#---------------------
Q. pods custom output
#---------------------

student-node ~ ➜  kubectl get pods -n spectra-1267 -o=custom-columns='POD_NAME:metadata.name,IP_ADDR:status.podIP' --sort-by=.status.podIP

POD_NAME   IP_ADDR
pod-12     10.42.0.18
pod-23     10.42.0.19
pod-34     10.42.0.20
pod-21     10.42.0.21
...


#---------------------
scaling replica set
#---------------------

k scale sts o3db --replicas 1


------------------
kubeadm joining nodes
----------------------


root@cluster3-controlplane1:~# kubeadm token create --print-join-command
kubeadm join 192.168.100.31:6443 --token lyl4o0.vbkmv9rdph5qd660 --discovery-token-ca-cert-hash sha256:b0c94ccf935e27306ff24bce4b8f611c621509e80075105b3f25d296a94927ce 


➜ ssh cluster3-node2

➜ root@cluster3-node2:~# kubeadm join 192.168.100.31:6443 --token lyl4o0.vbkmv9rdph5qd660 --discovery-token-ca-cert-hash sha256:b0c94ccf935e27306ff24bce4b8f611c621509e80075105b3f25d296a94927ce 

--------
openssl
---------

OpenSSL
comfortable generating certificates (.key, .crt, .csr, x509)
